# React + TypeScript + Vite プロジェクト ベストプラクティス

## プロジェクト概要
漫画・イラスト投稿プラットフォーム（学生向け）

## 技術スタック
- **フロントエンド**: React 18 + TypeScript
- **ビルドツール**: Vite
- **スタイリング**: Tailwind CSS
- **状態管理**: React Context + useState/useReducer
- **ルーティング**: React Router
- **データベース**: Supabase (PostgreSQL)
- **認証**: Supabase Auth

## コーディング規約

### TypeScript
- 厳密な型定義を心がける
- `any`型の使用は避ける
- インターフェースとタイプエイリアスを適切に使い分ける
- ジェネリクスを活用する

### React
- 関数コンポーネントとフックを使用
- クラスコンポーネントは使用しない
- カスタムフックを作成してロジックを分離
- メモ化（React.memo, useMemo, useCallback）を適切に使用

### コンポーネント設計
- 単一責任の原則に従う
- 再利用可能なコンポーネントを作成
- Propsの型定義は必須
- デフォルト値の設定を忘れずに

### ファイル構成
```
src/
├── components/          # 再利用可能なコンポーネント
│   ├── ui/             # 基本UIコンポーネント
│   ├── forms/          # フォーム関連コンポーネント
│   └── layout/         # レイアウトコンポーネント
├── pages/              # ページコンポーネント
├── hooks/              # カスタムフック
├── contexts/           # React Context
├── types/              # 型定義
├── utils/              # ユーティリティ関数
├── services/           # API呼び出し
└── constants/          # 定数
```

### 命名規則
- コンポーネント: PascalCase (例: `UserProfile.tsx`)
- ファイル: PascalCase (例: `WorkCard.tsx`)
- 関数: camelCase (例: `handleSubmit`)
- 定数: UPPER_SNAKE_CASE (例: `MAX_FILE_SIZE`)
- 型・インターフェース: PascalCase (例: `UserProfile`)

### スタイリング
- Tailwind CSSクラスを優先使用
- カスタムCSSは最小限に
- レスポンシブデザインを意識
- モバイルファーストのアプローチ

### 状態管理
- ローカル状態: `useState`
- 複雑な状態: `useReducer`
- グローバル状態: React Context
- 必要に応じてZustand等の軽量ライブラリを検討

### パフォーマンス
- 不要な再レンダリングを防ぐ
- 画像の遅延読み込み
- 仮想化（大量データの表示時）
- コード分割（React.lazy）

### エラーハンドリング
- エラーバウンダリーの実装
- 適切なエラーメッセージの表示
- ローディング状態の管理
- フォールバックUIの提供

### アクセシビリティ
- セマンティックなHTML
- ARIA属性の適切な使用
- キーボードナビゲーション対応
- スクリーンリーダー対応

### テスト
- コンポーネントの単体テスト
- ユーザーインタラクションのテスト
- エラーケースのテスト
- アクセシビリティのテスト

## 漫画・イラストプラットフォーム固有の要件

### 画像処理
- 複数画像のアップロード対応
- サムネイル生成
- 画像最適化
- 遅延読み込み

### R-18コンテンツ対応
- 年齢確認機能
- コンテンツ分離
- 適切な警告表示

### レスポンシブ対応
- モバイル: ~768px
- タブレット: 768px~1024px
- デスクトップ: 1024px~
- タッチ操作対応

### パフォーマンス要件
- 画像表示の最適化
- ランキング更新（週1回）
- 学生コミュニティ規模の同時接続対応
description:
globs:
alwaysApply: false
---
